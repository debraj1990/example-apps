#!/usr/bin/groovy

pipeline {

  agent any

  options {
      disableConcurrentBuilds()
  }

  // tools {nodejs "node"}

  stages {
    
    stage('Checkout') {
      steps {
        git 'https://github.com/nagabhushanamn/example-apps'
      }
    }

    stage('Install dependencies') {
      agent {
        docker { image 'node:7-alpine' }
      }
      steps {
        dir('node-app') {
        sh 'npm install'
        }
      }
    }

    stage('Test') {
      agent {
        docker { image 'node:7-alpine' }
      }
      steps {
        dir('node-app') {
         sh 'npm test'
        }
      }
      post {
        always {
          step([$class: 'CoberturaPublisher', coberturaReportFile: 'node-app/output/coverage/jest/cobertura-coverage.xml'])
        }
      }
    }

  /*
    stage("Build") {
        steps { buildApp() }
		}

    stage("Deploy - Dev") {
      steps { deploy('dev') }
		}
    
    stage("Test - UAT Dev") {
			steps { runUAT(8888) }
		}

		stage("Deploy - Stage") {
			steps { deploy('stage') }
		}

		stage("Test - UAT Stage") {
			steps { runUAT(88) }
		}

    stage("Approve") {
      steps { approve() }
		}

    stage("Deploy - Live") {
      steps { deploy('live') }
		}

		stage("Test - UAT Live") {
      steps { runUAT(80) }
		}

    */

	}

  

}

// steps
def buildApp() {
	dir ('node-app' ) {
		def appImage = docker.build("nagabhushanamn/myapp:${BUILD_NUMBER}")
	}
}

def deploy(environment) {
	def containerName = ''
	def port = ''
	if ("${environment}" == 'dev') {
		containerName = "app_dev"
		port = "8888"
	} 
  else if ("${environment}" == 'stage') {
		containerName = "app_stage"
		port = "88"
	}
  else if ("${environment}" == 'live') {
		containerName = "app_live"
		port = "80"
	}
	else {
		println "Environment not valid"
		System.exit(0)
	}
	sh "docker ps -f name=${containerName} -q | xargs --no-run-if-empty docker stop"
	sh "docker ps -a -f name=${containerName} -q | xargs -r docker rm"
	sh "docker run -d -p ${port}:3000 --name ${containerName} nagabhushanamn/myapp:${BUILD_NUMBER}"
}

def runUAT(port) {
  sh 'chmod +x node-app/__tests__/runUAT.sh'
	sh "node-app/__tests__/runUAT.sh ${port}"
}

def approve() {
	timeout(time:1, unit:'DAYS') {
		input('Do you want to deploy to live?')
	}
}

